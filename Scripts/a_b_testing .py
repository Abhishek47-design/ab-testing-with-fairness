# -*- coding: utf-8 -*-
"""A/B Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AtqYk_M4pelxjBvIdR2j0KlxF_YR-d5W

**Load Data**
"""

import pandas as pd

df = pd.read_csv("/content/ab_test_fairness_sim.csv")
print(df.head())
print(df.shape)

"""**Randomization / Balance Check**"""

print(df.groupby("treatment")["age_bin"].value_counts(normalize=True))
print(df.groupby("treatment")["gender"].value_counts(normalize=True))
print(df.groupby("treatment")["income_bin"].value_counts(normalize=True))

"""**Overall A/B Test Results**

>


"""

conversion_rates = df.groupby("treatment")["converted"].mean()
print(conversion_rates)

lift = conversion_rates[1] - conversion_rates[0]
print("Absolute lift:", lift)

import statsmodels.api as sm

# successes and trials
successes = df.groupby("treatment")["converted"].sum().values
trials = df.groupby("treatment")["converted"].count().values

z_stat, p_val = sm.stats.proportions_ztest(successes, trials)
print("Z-statistic:", z_stat, "P-value:", p_val)

confint = sm.stats.proportion_confint(successes, trials, alpha=0.05, method="wilson")
print("Confidence intervals:", confint)

import matplotlib.pyplot as plt

conversion_rates.plot(kind="bar", color=["gray","blue"])
plt.xticks([0,1], ["Control","Treatment"])
plt.ylabel("Conversion Rate")
plt.title("A/B Test Conversion Rates")
plt.show()

"""**Subgroup Analysis (Fairness Check)**"""

subgroups = ["age_bin", "gender", "income_bin"]

for col in subgroups:
    rates = df.groupby([col, "treatment"])["converted"].mean().unstack()
    rates["lift"] = rates[1] - rates[0]
    print(f"\n=== Conversion by {col} ===")
    print(rates)

from statsmodels.stats.proportion import proportions_ztest

for col in subgroups:
    print(f"\n=== Z-tests by {col} ===")
    for subgroup, g in df.groupby(col):
        successes = g.groupby("treatment")["converted"].sum().values
        trials = g.groupby("treatment")["converted"].count().values
        z_stat, p_val = proportions_ztest(successes, trials)
        print(f"{subgroup}: Z={z_stat:.2f}, p={p_val:.4f}")

import seaborn as sns
import matplotlib.pyplot as plt

for col in subgroups:
    plt.figure(figsize=(6,4))
    sns.barplot(x=col, y="converted", hue="treatment", data=df, ci=None)
    plt.title(f"Conversion Rates by {col}")
    plt.ylabel("Conversion Rate")
    plt.show()

"""**Logistic Regression (Model-Based Analysis)**"""

import statsmodels.formula.api as smf

# Baseline model: effect of treatment only
model1 = smf.logit("converted ~ treatment", data=df).fit()
print(model1.summary())

# Add age, gender, income as categorical predictors
model2 = smf.logit("converted ~ treatment + C(age_bin) + C(gender) + C(income_bin)", data=df).fit()
print(model2.summary())

# Interaction with age, gender, income
model3 = smf.logit("converted ~ treatment*C(age_bin) + treatment*C(gender) + treatment*C(income_bin)", data=df).fit()
print(model3.summary())

import numpy as np

odds_ratios = np.exp(model3.params)
print(odds_ratios)

